/**
 * input format for the creation of a merkle tree.
 * Strings have to be HexStrings("0x1a6") or DecimalStrings("374").
 */
type InputForMerkle = string | string[];
declare enum HashType {
    Pedersen = "Pedersen",
    Poseidon = "Poseidon"
}
/**
 * Output format for the storage of a merkle tree.
 * Strings have to be HexStrings("0x1a6") or DecimalStrings("374").
 */
interface StarknetMerkleTreeData {
    /** version of the storage format */
    format: 'standard-v2';
    /** hash of each node of the tree */
    tree: string[];
    /** values of the tree leaves */
    values: {
        /** content of each leaf */
        value: InputForMerkle;
        /** position in the tree */
        treeIndex: number;
    }[];
    hashLookup: {
        [hash: string]: number;
    };
    hashType: HashType;
}
/**
 * Calculate the hash of 2 values, ordered before calculation.
 *
 * @param a - first value.
 * @param b - second value.
 * @param hashType - optional. The type of hash : HashType.Pedersen (by default) or HashType.Poseidon.
 * @returns the hash of these data
 * @example
 * ```typescript
 * const hash = merkle.hasPair(34447789n, 158953n));
 * }
 * ```
 */
declare const hashPair: (a: bigint, b: bigint, hashType?: HashType) => bigint;
/**
 * Compute Poseidon hash from data
 *  @param data - Array of hex string.
 * @returns format: bigint - poseidon hash
 */
declare function computePoseidonHashOnElements(data: string[]): bigint;
/**
 * Calculate the hash of data formatted in {@link InputForMerkle}
 * and returns a HexString.
 *
 * @param data - array of Hex string
 * @param hashType - optional. The type of hash : HashType.Pedersen (by default) or HashType.Poseidon.
 * @returns the hash of these data in HexString format
 * @example
 * ```typescript
 * const hashHex = merkle.hashDataToHex(["0x23a56e","0x1e54","0x34cc65"]), HashType.Pedersen);
 * }
 * ```
 */
declare function hashDataToHex(data: InputForMerkle, hashType?: HashType): string;
/**
 * Calculate the hash of data formatted in {@link InputForMerkle}
 * and returns a bigint.
 *
 * @param data - array of Hex string
 * @param hashType - optional. The type of hash : HashType.Pedersen (by default) or HashType.Poseidon.
 * @returns the hash of these data in bigint format
 * @example
 * ```typescript
 * const hashBigint = merkle.hashDataToBigint("0x23a5765C332d8f6e"), HashType.Pedersen);
 * }
 * ```
 */
declare function hashDataToBigint(data: InputForMerkle, hashType?: HashType): bigint;
/**
 * Class for handling Merkle trees.
 */
declare class StarknetMerkleTree {
    private readonly tree;
    private readonly values;
    private readonly hashLookup;
    private readonly hashType;
    private constructor();
    private static adaptInputItem;
    /**
     * Creates a standard Merkle tree out of an array.
     *
     * @param values - the content of each leaf of the tree.
     * @param hashType - the type of hash : HashType.Pedersen or HashType.Poseidon.
     *
     * @returns a Merkle tree object
     * @example
     * ```typescript
     * const data: merkle.inputForMerkle[] = [
     *   ['0x69b49c2cc8b16e80e86bfc5b0614a59aa8c9b601569c7b80dde04d3f3151b79', '256'],
     *   ['0x3cad9a072d3cf29729ab2fad2e08972b8cfde01d4979083fb6d15e8e66f8ab1', '25'],
     *   ['0x27d32a3033df4277caa9e9396100b7ca8c66a4ef8ea5f6765b91a7c17f0109c', '56'],
     *   ['0x7e00d496e324876bbc8531f2d9a82bf154d1a04a50218ee74cdd372f75a551a', '26'],
     *   ['0x53c615080d35defd55569488bc48c1a91d82f2d2ce6199463e095b4a4ead551', '56'],
     * ];
     * const tree = merkle.StarknetMerkleTree.create(data);
     * ```
     */
    static create(values: InputForMerkle[], hashType?: HashType): StarknetMerkleTree;
    /**
     * return the nth data used for the tree creation.
     *
     * @param pos - input data order (0 first).
     * @returns
     * @example
     * ```typescript
     * const data= tree.getInputData(3);
     * ```
     */
    getInputData(pos: number): InputForMerkle;
    /**
     * Loads the tree from a description previously returned by {@link dump}.
     *
     * @param data - storage of Merkle tree.
     * @returns - a merkle tree description
     * @example
     * ```typescript
     * StarknetMerkleTree.load(JSON.parse(fs.readFileSync('tree.json','ascii')));
     * ```
     */
    static load(data: StarknetMerkleTreeData): StarknetMerkleTree;
    /**
     * Returns a description of the merkle tree for distribution.
     * It contains all the necessary information to reproduce the tree,
     * find the relevant leaves, and generate proofs.
     * You should distribute this to users in a web application
     * so they can generate proofs for their leaves of interest.
     *
     * @returns - a merkle tree description
     * @example
     * ```typescript
     * fs.writeFileSync('tree.json', JSON.stringify(tree.dump(),undefined,2));
     * ```
     */
    dump(): StarknetMerkleTreeData;
    /**
     * Returns a visual representation of the tree that can be useful for debugging.
     *
     * @returns string containing the result.
     * @example
     * ```typescript
     * console.log(tree.render());
     * ```
     */
    render(): string;
    /**
     * The root of the tree is a commitment on the values of the tree. It can be
     * published in a smart contract, to later prove that its values are part
     * of the tree.
     *
     * @returns an HexString ("0x1e3")
     * @example
     * ```typescript
     * console.log(tree.root);
     * ```
     */
    get root(): string;
    /**
     * Lists the values in the tree along with their indices,
     * which can be used to obtain proofs.
     *
     * @example
     * ```typescript
     * for (const [i, v] of tree.entries()) {
     * console.log('value:', v);
     * console.log('proof:', tree.getProof(i));
     * }
     * ```
     */
    entries(): Iterable<[number, InputForMerkle]>;
    /**
     * Verify the consistency of the tree. Useful after a load().
     * Take care that this method is time-consuming.
     * Throw an error if validation fail.
     * @example
     * ```typescript
     * tree.validate();
     * ```
     */
    validate(): void;
    /**
     * Returns the leaf hash of the value.
     *
     * @param leaf - the data contained in a leaf.
     * @param hashType - The type of hash : HashType.Pedersen or HashType.Poseidon.
     * @returns the hash of these data, stored at the base of the tree.
     * @example
     * ```typescript
     * const leaf = merkle.leafHash(["0x1e6f3", '100'], HashType.Pedersen);
     * }
     * ```
     */
    static leafHash(leaf: InputForMerkle, hashType: HashType): string;
    private leafLookup;
    /**
     * Returns a proof for the ith value in the tree. Indices refer to
     * the position of the values in the array from which the tree was constructed.
     * Also accepts a value instead of an index, but this will be less efficient.
     * It will fail if the value is not found in the tree.
     *
     * @param leaf - the position of construction, or the data contained in a leaf.
     * @returns the proof, to provide to the smart-contract.
     * @example
     * ```typescript
     * const proof = tree.getProof(3);
     * const proof = tree.getProof(["0x43af5", '100']);
     * }
     * ```
     */
    getProof(leaf: number | InputForMerkle): string[];
    /**
     * Returns a boolean that is `true` when the proof verifies that
     * the value is contained in the tree.
     * @remarks
     * This job is normally made by the smart-contract.
     * Present here just to be able to check in the DAPP.
     *
     * @param leaf - the position of construction, or the data contained in a leaf.
     * @param proof - proof obtained with {@link getProof}.
     * @returns verification that the leaf is present in the tree,
     * without using the tree content.
     * @example
     * ```typescript
     * const result = tree.verify(3, proof);
     * const result = tree.verify(["0x34e67d", '100'], proof);
     * ```
     */
    verify(leaf: number | InputForMerkle, proof: string[]): boolean;
    private internVerify;
    private checkBounds;
    private validateValue;
    private getLeafHash;
}

export { HashType, type InputForMerkle, StarknetMerkleTree, type StarknetMerkleTreeData, computePoseidonHashOnElements, hashDataToBigint, hashDataToHex, hashPair };
