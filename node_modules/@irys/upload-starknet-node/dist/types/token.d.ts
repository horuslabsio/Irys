import type { TokenConfig, Tx } from '@irys/upload-core';
import { BaseNodeToken } from '@irys/upload/tokens/base';
import { Contract, RpcProvider, Provider } from 'starknet';
import { StarknetSigner, Signer } from '@irys/bundles';
import BigNumber from 'bignumber.js';
import { Account } from 'starknet';
export interface STRKTokenConfig extends TokenConfig {
    contractAddress: string;
    contractBase: [string, number | undefined];
    address: string;
}
export declare function extractX(bytes: Buffer): string;
export declare function decomposePubkey(pubkey: Buffer): [Buffer, Buffer, Buffer];
export declare const felt2hex: (felt: any) => string;
export default class BaseSTRK20Token extends BaseNodeToken {
    protected contractInstance: Contract;
    protected contractAddress: string;
    protected providerInstance: Provider;
    protected signer?: StarknetSigner;
    protected account: Account;
    protected config: STRKTokenConfig;
    constructor(config: STRKTokenConfig);
    ready(): Promise<void>;
    getContract(): Promise<Contract>;
    protected getProvider(): Promise<RpcProvider>;
    getTx(txId: string): Promise<Tx>;
    ownerToAddress(owner: any): Promise<string>;
    getAccountCompactPublicKey(address: string, contractId?: number): Promise<{
        publicKey: Buffer;
        id: number;
    }>;
    sign(data: Uint8Array): Promise<Uint8Array>;
    getSigner(): Signer;
    verify(pub: any, data: Uint8Array, signature: Uint8Array): Promise<boolean>;
    getCurrentHeight(): Promise<BigNumber>;
    getFee(amount: BigNumber.Value, to?: string, _multiplier?: BigNumber.Value | undefined): Promise<BigNumber>;
    createTx(amount: BigNumber.Value, to: string, fee?: string | object | undefined): Promise<{
        txId: string | undefined;
        tx: any;
    }>;
    sendTx(data: any): Promise<string | undefined>;
    getPublicKey(): string | Buffer;
}
